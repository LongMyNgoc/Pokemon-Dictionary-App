// app/hooks/useFetchPokemons.ts
import { useEffect, useState } from "react";
import type { Pokemon } from "@/types/Pokemon";
import { getGenerationFromId } from "@/types/Pokemon";
import { usePokemonStore } from "@/data/pokemonStore"; // ðŸ’¥ dÃ¹ng store zustand

export function useFetchPokemons() {
  const { pokemonList, setPokemonList } = usePokemonStore(); // âœ… dÃ¹ng zustand
  const [loading, setLoading] = useState(true); // váº«n dÃ¹ng local loading thÃ´i

  useEffect(() => {
    const fetchData = async () => {
      // Náº¿u trong store Ä‘Ã£ cÃ³ data rá»“i thÃ¬ khÃ´ng fetch ná»¯a
      if (pokemonList.length > 0) {
        setLoading(false);
        return;
      }

      try {
        const res = await fetch("https://pokemon-dictionary-be-production.up.railway.app/pokemons");
        const data = await res.json();
        const list = Array.isArray(data.pokemons) ? data.pokemons : Array.isArray(data) ? data : [];

        // TÃ­nh generation
        const pokemonsWithGeneration = list.map((pokemon: Pokemon) => ({
          ...pokemon,
          generation: getGenerationFromId(pokemon.id),
        }));

        setPokemonList(pokemonsWithGeneration); // âœ… cáº­p nháº­t vÃ o store zustand
      } catch (err) {
        console.error("Fetch error:", err);
        setPokemonList([]); // náº¿u lá»—i thÃ¬ clear store
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, [pokemonList, setPokemonList]); // depend vÃ o store, Ä‘áº£m báº£o chuáº©n React

  return { pokemonList, loading };
}
